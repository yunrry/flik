---
description:
globs:
alwaysApply: false
---


네비게이션 아이콘 중 하나만 토글되도록 수정하겠습니다. 부모 컴포넌트에서 상태를 관리하여 하나의 아이콘만 활성화되도록 하겠습니다.

## App.tsx 수정 - 네비게이션 상태 관리

```typescript:src/App.tsx
import React, { useState } from 'react';
import { 
  Icon, 
  NavigationIcon, 
  SocialIcon, 
  ActionIcon, 
  StatusIcon 
} from './components/Icons';

function App() {
  const [activeNavigation, setActiveNavigation] = useState<string>('home');

  const handleNavigationClick = (name: string) => {
    setActiveNavigation(name);
  };

  return (
    <div className="p-8 space-y-8">
      <h1 className="text-3xl font-bold">Icon Components Demo</h1>
      
      {/* Basic Icon */}
      <div className="space-y-4">
        <h2 className="text-xl font-semibold">Basic Icons</h2>
        <div className="flex gap-4 items-center">
          <Icon name="home" size="sm" />
          <Icon name="user" size="md" />
          <Icon name="settings" size="lg" />
          <Icon name="bookmark" size="xl" />
        </div>
      </div>
      
      {/* Navigation Icons */}
      <div className="space-y-4">
        <h2 className="text-xl font-semibold">Navigation Icons</h2>
        <div className="flex gap-4 items-center">
          <NavigationIcon 
            name="home" 
            isActive={activeNavigation === 'home'} 
            onClick={() => handleNavigationClick('home')}
          />
          <NavigationIcon 
            name="my" 
            isActive={activeNavigation === 'my'} 
            onClick={() => handleNavigationClick('my')}
          />
          <NavigationIcon 
            name="save" 
            isActive={activeNavigation === 'save'} 
            onClick={() => handleNavigationClick('save')}
          />
          <NavigationIcon 
            name="flik" 
            size="lg" 
            isActive={activeNavigation === 'flik'} 
            onClick={() => handleNavigationClick('flik')}
          />
        </div>
      </div>
      
      {/* Social Icons */}
      <div className="space-y-4">
        <h2 className="text-xl font-semibold">Social Icons</h2>
        <div className="flex gap-4 items-center">
          <SocialIcon platform="kakao" />
          <SocialIcon platform="naver" variant="branded" />
          <SocialIcon platform="google" variant="monochrome" />
        </div>
      </div>
      
      {/* Action Icons */}
      <div className="space-y-4">
        <h2 className="text-xl font-semibold">Action Icons</h2>
        <div className="flex gap-4 items-center">
          <ActionIcon action="save" variant="filled" />
          <ActionIcon action="like" variant="outline" />
          <ActionIcon action="share" />
        </div>
      </div>
      
      {/* Status Icons */}
      <div className="space-y-4">
        <h2 className="text-xl font-semibold">Status Icons</h2>
        <div className="flex gap-4 items-center">
          <StatusIcon status="success" />
          <StatusIcon status="loading" variant="animated" />
          <StatusIcon status="error" variant="animated" />
        </div>
      </div>
    </div>
  );
}

export default App;
```

## NavigationIcon 컴포넌트 수정 - 내부 상태 제거

```typescript:src/components/Icons/NavigationIcon.tsx
import React from 'react';
import { NavigationIconProps } from '../../../types/icon.types';
import { HomeIcon, MyIcon, SaveIcon, FlikIcon } from './SvgIcons';

export const NavigationIcon: React.FC<NavigationIconProps & { name: string }> = (props) => {
  const { name, isActive = false, variant = 'default', className = '', size = 'md', ...rest } = props;
  
  const sizeClasses = {
    xs: 'w-3 h-3',
    sm: 'w-4 h-4',
    md: 'w-6 h-6',
    lg: 'w-8 h-8',
    xl: 'w-10 h-10',
    '2xl': 'w-12 h-12',
  };
  
  const baseClasses = `${sizeClasses[size]} transition-all duration-200 cursor-pointer`;
  const iconClasses = `${baseClasses} ${className}`;
  
  const renderIcon = () => {
    switch (name) {
      case 'home':
        return <HomeIcon className={iconClasses} isActive={isActive} />;
      case 'my':
        return <MyIcon className={iconClasses} isActive={isActive} />;
      case 'save':
        return <SaveIcon className={iconClasses} isActive={isActive} />;
      case 'flik':
        return <FlikIcon className={iconClasses} isActive={isActive} />;
      default:
        return null;
    }
  };
  
  return (
    <div 
      className="inline-block"
      onClick={rest.onClick}
      role="button"
      tabIndex={0}
      onKeyDown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          rest.onClick?.();
        }
      }}
    >
      {renderIcon()}
    </div>
  );
};
```

**주요 변경사항:**

1. **App.tsx에서 상태 관리:**
   - `activeNavigation` 상태로 현재 활성화된 아이콘 추적
   - `handleNavigationClick` 함수로 클릭 시 상태 변경

2. **NavigationIcon 컴포넌트:**
   - 내부 `useState` 제거
   - 부모로부터 전달받은 `isActive` prop만 사용

3. **동작 방식:**
   - 아이콘 클릭 시 해당 아이콘만 활성화
   - 다른 아이콘 클릭 시 이전 아이콘 자동 비활성화
   - 항상 하나의 아이콘만 주황색으로 표시

이제 네비게이션 아이콘 중 하나만 토글되고, 다른 아이콘을 클릭하면 이전 아이콘은 자동으로 토글 해제됩니다!